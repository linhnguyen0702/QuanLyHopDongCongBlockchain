require('dotenv').config({ path: './config.env' });
const mongoose = require('mongoose');
const AuditLog = require('./models/AuditLog');
const User = require('./models/User');

const seedAuditLogs = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB');

    await AuditLog.deleteMany({});
    console.log('‚úÖ Cleared existing audit logs');

    const adminUser = await User.findOne({ email: 'admin@example.com' });
    if (!adminUser) {
      console.error('Admin user not found. Please ensure default admin user is created.');
      return;
    }

    const logs = [
      {
        type: 'contract',
        action: 'created',
        description: 'T·∫°o h·ª£p ƒë·ªìng m·ªõi "X√¢y d·ª±ng c·∫ßu Nh·∫≠t T√¢n 2"',
        details: 'H·ª£p ƒë·ªìng s·ªë: HD001, Gi√° tr·ªã: 450,000,000 VNƒê',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.1'
      },
      {
        type: 'contract',
        action: 'approved',
        description: 'Ph√™ duy·ªát h·ª£p ƒë·ªìng "N√¢ng c·∫•p h·ªá th·ªëng ƒëi·ªán"',
        details: 'H·ª£p ƒë·ªìng s·ªë: HD002, Tr·∫°ng th√°i: ƒê√£ duy·ªát',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.2'
      },
      {
        type: 'user',
        action: 'created',
        description: 'T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi',
        details: 'Email: user@example.com, Vai tr√≤: User',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.3'
      },
      {
        type: 'contractor',
        action: 'updated',
        description: 'C·∫≠p nh·∫≠t th√¥ng tin nh√† th·∫ßu "C√¥ng ty ABC"',
        details: 'C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.4'
      },
      {
        type: 'security',
        action: 'login',
        description: 'ƒêƒÉng nh·∫≠p h·ªá th·ªëng',
        details: 'IP: 192.168.1.5, Browser: Chrome',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.5'
      },
      {
        type: 'contract',
        action: 'deleted',
        description: 'X√≥a h·ª£p ƒë·ªìng "D·ª± √°n h·ªßy b·ªè"',
        details: 'L√Ω do: D·ª± √°n b·ªã h·ªßy b·ªè',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.6'
      },
      {
        type: 'user',
        action: 'password_change',
        description: 'Thay ƒë·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng',
        details: 'Ng∆∞·ªùi d√πng admin ƒë√£ thay ƒë·ªïi m·∫≠t kh·∫©u',
        performedBy: adminUser._id,
        ipAddress: '192.168.1.7'
      },
      {
        type: 'system',
        action: 'backup',
        description: 'H·ªá th·ªëng ƒë√£ t·∫°o b·∫£n sao l∆∞u',
        details: 'Sao l∆∞u database th√†nh c√¥ng',
        performedBy: adminUser._id,
        ipAddress: 'System'
      }
    ];

    await AuditLog.insertMany(logs);
    console.log('‚úÖ Created audit logs successfully');
    console.log('üéâ Audit logs seeding completed!');
  } catch (error) {
    console.error('‚ùå Error seeding audit logs:', error);
  } finally {
    await mongoose.disconnect();
  }
};

seedAuditLogs();
